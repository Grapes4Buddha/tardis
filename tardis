#!/usr/bin/perl
use strict;
use POSIX qw(strftime);
use File::Basename qw(&basename &dirname);
use Cwd 'realpath';
use File::Temp qw(tempfile);
use Getopt::Long;
use Sys::Hostname;
use Pod::Usage;

my $RSYNC_OPTIONS = "-avxSH";

=pod

=head1 NAME

B<tardis> - efficient rsync-based linked backups

=head1 SYNOPSIS

B<tardis> [ B<--host>=I<remote-host> ] [ B<--user>=I<remote-userid> ]
[ B<--push> | B<--pull> ] [ B<--quiet> ] B<--backupdir|-d>=I<backup-directory>
{ B<--linkdirs>=I<max-linkdirs> ] [ B<--mount> ]
I<source-dir> [ I<source-dir> ... ]

=head1 DESCRIPTION

Backup one or more I<source-dir> directories to I<backup-directory>.
If I<remote-host> is specified, I<source-dir>s are taken to be located
on the remote host, which must be accessble via SSH with private/public
key authentication without a passphrase.

If I<backup-directory>/I<hostname>/B<.exclude> exists, it is assumed to
be a file suitable for use by rsync's B<--exclude-from> option to specify
exclude patterns for the backup.

B<Please note>: Because B<tardis> makes heavy use of hard links to optimize
storage, the volume that contains I<backup-directory> will likely need to have
many more inodes than are allocated by default when creating a filesystem.  For
this reason it is strongly recommended to increase the number of inodes on the
backup volume by 5-10x normal at the very least.  It is not uncommon for
backups to fail due to lack of inodes if this is not done.

=head2 Remote Backups

   rsync -avxSH --exclude-from=/backups/raven/.exclude --link-dest=../20210105.1 /home sshd@bowdoinnas:/shares/Backup___Desk-1/raven/20210105.2

B<tardis> is able to do remote backups in either I<pull> or I<push> modes.

I<pull> backups are the default and require that the backup clients allow root
rsync access from the backup server, usually by adding the backup server's root
ssh public key to /root/.ssh/authorized_keys on the client host.

I<push> backups are also supported and require the backup client to have rsync
access to the backup server.

For security it may be desirable to restrict ssh key access to just being able
to run rsync.

=head1 OPTIONS

=over 4

=item B<--host>=I<remote-host>

With B<--pull>, retrieves the files to backup from I<remote-host>.  With
B<--push>, backs up local files to I<remote-host>.

=item B<--user>=I<remote-userid>

Allows specification of the remote user to connect as on the remote system.

=item B<--push>

Backup local I<source-dir>s by pushing them to the I<backup-directory> on the
I<remote-host>.

=item B<--pull>

Backup I<source-dir>s on I<remote-host> by pulling them to the local
I<backup-directory>.  This is the default behavior if B<--host> is specified.

=item B<--backupdir>=I<backup-directory>

Use I<backup-directory> as the top-level directory into which files should be
copied.  Under B<backup-directory> will be a directory for the host being
backed up.  Under the host directory will be a set of time-stamped directories,
each of which will contain a backup of the files in the backup set.

=item B<--linkdirs>=I<max-linkdirs>

Use at most I<max-linkdirs> previous backups as incremental backup reference
directories.  The default is 10.

=item B<--mount>

Mount I<backup-directory> prior to performing the backup if it is not already mounted.
Unmount it when done if it had to be mounted.
This option assumes that I<backup-directory> is actually a mountable
volume listed in /etc/fstab.  Not supported with B<--push>.

=item B<--quiet>

Normally, B<tardis> will emit rsync output on STDOUT as well as a
log file.  B<--quiet> suppresses the STDOUT messages but still writes
to the log file.

=item B<--options>=I<rsync-options>

Pass I<rsync-options> along as additional options to B<rsync>.

=item I<source-dir>

The directory to back up.  Can be specified multiple times to backup multiple
directories.  Rsync will be called once per I<source-dir>.

=back

=head1 AUTHOR

David Merrill <alternatecrow@gmail.com>

=cut
my $unmount_when_done = 0;

my %opt;
GetOptions(\%opt,
  "host=s",
  "user=s",
  "pull",
  "push",
  "quiet",
  "backupdirectory|directory|d=s",
  "mount",
  "linkdirs=i",
  "options=s",
) or pod2usage();

my $backupdir = $opt{backupdirectory};
pod2usage("--backupdir is a required option") unless $backupdir;

unless (defined $opt{host}) {
  pod2usage("'--pull' requires a remote host") if defined $opt{pull};
  pod2usage("'--push' requires a remote host") if defined $opt{push};
  pod2usage("'--user' requires a remote host") if defined $opt{user};
}

pod2usage("'--mount' is not compatible with '--push'") if defined $opt{mount} && defined $opt{push};

# Maximum number of previous backup directories to use as link references.
# This is >1 in case there have been recent backup failures or files
# have been moved around a lot.
if (defined $opt{linkdirs}) {
  die "Error: --linkdirs cannot be negative" if $opt{linkdirs} < 0;
} else {
  $opt{linkdirs} = 10;
}


#
# Execute command(s) on the host where the backup will be placed.  This could
# either be on the local host or on a backup server (if --push is specified)
#
sub on_dest {
  my @result;
  my $cmd = join(" ", @_);
  if ($opt{push}) {
    @result = `ssh $opt{host} '$cmd'`;
  } else {
    @result = `$cmd`;
  }

  if (wantarray) {
    chomp(@result);
    return @result;
  }

  return join("",@result);
}

my %rsync_errcode = (
	1 => "RERR_SYNTAX -- syntax or usage error",
	2 => "RERR_PROTOCOL -- protocol incompatibility",
	3 => "RERR_FILESELECT -- errors selecting input/output files, dirs",
	4 => "RERR_UNSUPPORTED -- requested action not supported",
	5 => "RERR_STARTCLIENT -- error starting client-server protocol",
	6 => "RERR_LOG_FAILURE -- daemon unable to append to log-file",
	10 => "RERR_SOCKETIO -- error in socket IO",
	11 => "RERR_FILEIO -- error in file IO",
	12 => "RERR_STREAMIO -- error in rsync protocol data stream",
	13 => "RERR_MESSAGEIO -- errors with program diagnostics",
	14 => "RERR_IPC -- error in IPC code",
	20 => "RERR_SIGNAL -- status returned when sent SIGUSR1, SIGINT",
	21 => "RERR_WAITCHILD -- some error returned by waitpid()",
	22 => "RERR_MALLOC -- error allocating core memory buffers",
	23 => "RERR_PARTIAL -- partial transfer",
	24 => "RERR_VANISHED -- file(s) vanished on sender side",
	25 => "RERR_DEL_LIMIT -- skipped some deletes due to --max-delete",
	30 => "RERR_TIMEOUT -- timeout in data send/receive",
);

# server is specified on command line
my $backup_client;
if ($opt{host} && $opt{pull}) {
	$backup_client = $opt{host};
} else {
	$backup_client = hostname;
}

if ($opt{push}) {
  die "Error: Invalid backup directory '$backupdir' on backup server $opt{host}!\n" unless defined on_dest("ls -d $backupdir");
} else {
  die "Error: Invalid backup directory '$backupdir'!\n" unless -d $backupdir;
}
# make sure the backup drive is mounted if --mount is specified
# (not applicable with --push)
unless ($opt{push}) {
  if ( $opt{mount} && ! -d "$backupdir/lost+found" ) {
    system("mount $backupdir");
    if ($?) {
      die "Error: could not mount $backupdir: $!\n";
    }
    $unmount_when_done = 1
  }
}

my @source_dirs = @ARGV;
pod2usage("No source directories specified!") unless @source_dirs;
pod2usage("Remote hosts must be specified using the --host option") if grep(/:/,@source_dirs,$backupdir);

# destination dir for backups
my $dest = "$backupdir/$backup_client";

# today's backup destination directory
my $snapshot_dir = strftime("%Y%m%d.%H%M%S",localtime($^T));


# remove any empty backup directories -- this can happen if a backup fails
on_dest("rmdir $backupdir/$backup_client/2* 2>/dev/null");

my @linkdirs = reverse(sort(on_dest("cd $dest && ls -1d 2* 2>/dev/null")));

# delete today's backup dir if it already exists (e.g. if script is being
# re-run). Really this should never happen since we now have seconds in
# the directory name but check anyway.
if (grep($_ eq $snapshot_dir, @linkdirs)) {
  on_dest("rm -rf $dest/$snapshot_dir");
  @linkdirs = grep($_ ne $snapshot_dir, @linkdirs);
}

# find reference dirs for backup, up to the limit.
pop @linkdirs while @linkdirs > $opt{linkdirs};

on_dest("mkdir -p '$dest/$snapshot_dir'");
die "Error: Could not create $dest/$snapshot_dir: $!\n" if $?;

# Make sure the log file exists
on_dest("mkdir -p $dest/log");
die "Error: Could not create log directory $dest/log" if $?;

my $logfile = "$dest/log/$snapshot_dir.log";

#
# Logfile is either in a local file or in the remote backup
# server, accessed via a separate ssh connection.
#

my $LOG;
if ($opt{push}) {
  open($LOG, '|-', "ssh $opt{host} 'cat > $logfile'")
    or print "Error: Cannot open remote logfile $logfile: $!\n";
} else {
  open($LOG, '>', $logfile)
    or print "Error: Cannot write logfile $logfile: $!\n";
}
print $LOG "* Backup started at ",scalar(localtime),"\n";

# 
# Determine what to use for an exclude file.  If the backups are
# being stored locally we can just use the exclude file directly.
# However if we're using a remote backup server we have to copy
# the remote's exclude file to a local temp file and use that.
#
my $exclude_file;
my $tmpfh;
if ($opt{push}) {
  ($tmpfh, $exclude_file) = tempfile(UNLINK=>1)
    or die "Error: could not create temporary exclude file!\n";
  print $tmpfh scalar(on_dest("cat $dest/.exclude"));
  close $tmpfh;
} else {
  $exclude_file = "$dest/.exclude" if -s "$dest/.exclude";
}

#
# Compose rsync commands to mirror all the data from the server.
# We have to do each source dir individually -- this is an rsync
# limitation when pulling from a remote rsync server.
#

foreach my $srcdir (@source_dirs) {

	my $cmd = "rsync $RSYNC_OPTIONS";

	if ($opt{options}) {
		$cmd .= " " . $opt{options};
	}

	foreach my $linkdir (@linkdirs) {
		$cmd .= " --link-dest=../$linkdir";
	}

	unless ($exclude_file) {
		$exclude_file = "$srcdir/.tardis_exclude" if -f "$srcdir/.tardis_exclude";
	}

	$cmd .= " --exclude-from=$exclude_file" if -f $exclude_file;

	if ($opt{pull}) {
		$cmd .= " $backup_client:$srcdir $dest/$snapshot_dir";
	} elsif ($opt{push}) {
		$cmd .= " $srcdir $opt{host}:$dest/$snapshot_dir";
	} else {
	  $cmd .= " $srcdir $dest/$snapshot_dir";
  }

	print $LOG "\n\n*\n* Command to back up $srcdir:\n* $cmd\n*\n\n";

	open (BACKUP,"-|","$cmd 2>&1") 
		or die "Error: Cannot start backup command: $!\n";

	while ($_ = <BACKUP>) {
		next if /\/$/;
		next if /\s->\s/;
		print $LOG $_;
		print $_ unless $opt{quiet};;
	}
	close BACKUP;
	my $exit_value  = $? >> 8;

	if ($exit_value) {
		if ($rsync_errcode{$exit_value} =~ /^RERR_VANISHED/) {
			# Ignore RERR_VANISHED as it doesn't reflect a bad backup enough to invalidate the whole thing.
			print STDERR "Warning: rsync exit code for $srcdir was $exit_value ($rsync_errcode{$exit_value})!\n" unless $opt{quiet};
			print $LOG "Warning: rsync exit code for $srcdir was $exit_value ($rsync_errcode{$exit_value})!\n";
		} else {
			print STDERR "BACKUP FAILED for $srcdir!\n" unless $opt{quiet};
			print STDERR "** rsync exit code for $srcdir was $exit_value ($rsync_errcode{$exit_value})!\n" unless $opt{quiet};
			print $LOG  "BACKUP FAILED for $srcdir!\n";
			print $LOG "** rsync exit code for $srcdir was $exit_value ($rsync_errcode{$exit_value})!\n";
		}
	}

	# this is really lame but try to remove the backup directory.  It can only be removed if it is
	# empty; this ensures that the next backup will not be using an empty directory as a reference.
  on_dest("rmdir '$dest/$snapshot_dir' >/dev/null 2>&1");

	# make sure we have a current timestamp on the backup dir.  This is used to determine
	# when to expire an old backup.  If we don't update the timestamp the rsync will use the
	# same timestamp as the top level of the source directory, which probably won't change
	# very often.
	#
	#if (-d "$dest/$snapshot_dir") {
	#	system("touch '$dest/$snapshot_dir'");
	#}
	on_dest("touch -c '$dest/$snapshot_dir'");
}
close $LOG;


#
# The backup is done but we want to calculate the incremental disk usage of this backup.
# We don't do this for push backups yet.
#
exit 0 if $opt{push};

my $incr_usage;
my $full_usage;
open DU, "du -sk $dest/$linkdirs[0] $dest/$snapshot_dir |"
	or die "Error: Cannot run du command on $dest/$linkdirs[0] and $dest/$snapshot_dir: $!\n";
while ($_ = <DU>) {
	chomp;
	my ($usage,$dir) = split;
	next unless $dir eq "$dest/$snapshot_dir";
	$incr_usage = $usage;
}
close DU;

open DU, "du -sk $dest/$snapshot_dir |"
	or die "Error: Cannot run du command on $dest/$snapshot_dir: $!\n";
while ($_ = <DU>) {
	chomp;
	my ($usage,$dir) = split;
	next unless $dir eq "$dest/$snapshot_dir";
	$full_usage = $usage;
}
close DU;

open USAGE, ">>$dest/log/disk_usage"
	or die "Error: Cannot append to $dest/log/disk_usage: $!\n";
printf USAGE "%s\t%d\t%d\n", $snapshot_dir, $incr_usage, $full_usage;
close USAGE;

exit 0;

END {
	if ($unmount_when_done) {
		system("umount $backupdir");
	}
}
